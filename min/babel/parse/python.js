"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports["default"]=python;function _createForOfIteratorHelper(a,b){var c;if("undefined"==typeof Symbol||null==a[Symbol.iterator]){if(Array.isArray(a)||(c=_unsupportedIterableToArray(a))||b&&a&&"number"==typeof a.length){c&&(a=c);var d=0,e=function(){};return{s:e,n:function(){return d>=a.length?{done:!0}:{done:!1,value:a[d++]}},e:function(a){throw a},f:e}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var f,g=!0,h=!1;return{s:function(){c=a[Symbol.iterator]()},n:function(){var a=c.next();return g=a.done,a},e:function(a){h=!0,f=a},f:function(){try{g||null==c["return"]||c["return"]()}finally{if(h)throw f}}}}function _unsupportedIterableToArray(a,b){if(a){if("string"==typeof a)return _arrayLikeToArray(a,b);var c=Object.prototype.toString.call(a).slice(8,-1);return"Object"===c&&a.constructor&&(c=a.constructor.name),"Map"===c||"Set"===c?Array.from(a):"Arguments"===c||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(c)?_arrayLikeToArray(a,b):void 0}}function _arrayLikeToArray(a,b){(null==b||b>a.length)&&(b=a.length);for(var c=0,d=Array(b);c<b;c++)d[c]=a[c];return d}function python(a){var b,d={code:"",cash:{code:"",return:""}},e={name:[],out:""},f=_createForOfIteratorHelper(a.body);try{for(f.s();!(b=f.n()).done;){var g=b.value;if("FunctionDeclaration"===g.type){var h,j=_createForOfIteratorHelper(g.params);try{for(j.s();!(h=j.n()).done;){var k=h.value;e.name.push(k.name)}}catch(a){j.e(a)}finally{j.f()}for(var l,m=0;m<e.name.length;m++)l="",m!==e.name.length-1&&(l=","),e.out+="".concat(e.name[m]).concat(l);var i,n=_createForOfIteratorHelper(g.body.body);try{for(n.s();!(i=n.n()).done;){var o=i.value;"VariableDeclaration"===o.type&&"VariableDeclarator"===o.declarations[0].type&&"Identifier"===o.declarations[0].id.type&&"Literal"===o.declarations[0].init.type&&(d.cash.code+="".concat(o.declarations[0].id.name,"=").concat(o.declarations[0].init.value,";")),"ExpressionStatement"===o.type&&"CallExpression"===o.expression.type&&"MemberExpression"===o.expression.callee.type&&"console"===o.expression.callee.object.name&&"log"===o.expression.callee.property.name&&"Literal"===o.expression.arguments[0].type&&(d.cash.code+="print(\"".concat(o.expression.arguments[0].value,"\");")),"ReturnStatement"===o.type&&"BinaryExpression"===(null===o||void 0===o?void 0:o.argument.type)&&(d.cash["return"]+="".concat(o.argument.left.name," ").concat(o.argument.operator," ").concat(o.argument.right.name))}}catch(a){n.e(a)}finally{n.f()}d.code+="def ".concat(g.id.name,"(").concat(e.out,"): ").concat(d.cash.code," return ").concat(d.cash["return"])}}}catch(a){f.e(a)}finally{f.f()}return d}